package com.ankamagames.dofus.network
{
   import com.ankamagames.dofus.network.messages.authorized.ConsoleCommandsListMessage;
   import com.ankamagames.dofus.network.messages.authorized.ConsoleMessage;
   import com.ankamagames.dofus.network.messages.common.NetworkDataContainerMessage;
   import com.ankamagames.dofus.network.messages.common.basic.BasicPongMessage;
   import com.ankamagames.dofus.network.messages.connection.CredentialsAcknowledgementMessage;
   import com.ankamagames.dofus.network.messages.connection.HelloConnectMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationFailedBannedMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationFailedForBadVersionMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationFailedMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationSuccessMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationSuccessWithLoginTokenMessage;
   import com.ankamagames.dofus.network.messages.connection.MigratedServerListMessage;
   import com.ankamagames.dofus.network.messages.connection.SelectedServerDataExtendedMessage;
   import com.ankamagames.dofus.network.messages.connection.SelectedServerDataMessage;
   import com.ankamagames.dofus.network.messages.connection.SelectedServerRefusedMessage;
   import com.ankamagames.dofus.network.messages.connection.ServerStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.connection.ServersListMessage;
   import com.ankamagames.dofus.network.messages.connection.register.AccountLinkRequiredMessage;
   import com.ankamagames.dofus.network.messages.connection.register.NicknameAcceptedMessage;
   import com.ankamagames.dofus.network.messages.connection.register.NicknameRefusedMessage;
   import com.ankamagames.dofus.network.messages.connection.register.NicknameRegistrationMessage;
   import com.ankamagames.dofus.network.messages.connection.search.AcquaintanceSearchErrorMessage;
   import com.ankamagames.dofus.network.messages.connection.search.AcquaintanceServerListMessage;
   import com.ankamagames.dofus.network.messages.debug.DebugClearHighlightCellsMessage;
   import com.ankamagames.dofus.network.messages.debug.DebugHighlightCellsMessage;
   import com.ankamagames.dofus.network.messages.debug.DebugInClientMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementDetailedListMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementDetailsMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementFinishedInformationMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementListMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementRewardErrorMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementRewardSuccessMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.FriendGuildWarnOnAchievementCompleteStateMessage;
   import com.ankamagames.dofus.network.messages.game.actions.AbstractGameActionMessage;
   import com.ankamagames.dofus.network.messages.game.actions.AbstractGameActionWithAckMessage;
   import com.ankamagames.dofus.network.messages.game.actions.GameActionNoopMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.AbstractGameActionFightTargetedAbilityMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightActivateGlyphTrapMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightCarryCharacterMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightChangeLookMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightCloseCombatMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDeathMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellEffectMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellSpellMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellableEffectMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDodgePointLossMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDropCharacterMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightExchangePositionsMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightInvisibilityMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightInvisibleDetectedMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightKillMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightLifeAndShieldPointsLostMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightLifePointsGainMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightLifePointsLostMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightMarkCellsMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightModifyEffectsDurationMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightNoSpellCastMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightPointsVariationMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightReduceDamagesMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightReflectDamagesMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightReflectSpellMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSlideMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSpellCastMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSpellCooldownVariationMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSpellImmunityMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightStealKamaMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSummonMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTackledMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTeleportOnSameMapMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightThrowCharacterMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTriggerEffectMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTriggerGlyphTrapMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightUnmarkCellsMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightVanishMessage;
   import com.ankamagames.dofus.network.messages.game.actions.sequence.SequenceEndMessage;
   import com.ankamagames.dofus.network.messages.game.actions.sequence.SequenceStartMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceBulletinMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceBulletinSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceCreationResultMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceCreationStartedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceFactsErrorMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceFactsMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceGuildLeavingMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceInsiderInfoMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceInvitationStateRecrutedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceInvitationStateRecruterMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceInvitedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceJoinedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceLeftMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceListMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceMembershipMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceModificationStartedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceMotdMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceMotdSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AlliancePartialListMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceVersatileInfoListMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.KohUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.almanach.AlmanachCalendarDateMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AccountCapabilitiesMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AccountLoggingKickedMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AlreadyConnectedMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AuthenticationTicketAcceptedMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AuthenticationTicketRefusedMessage;
   import com.ankamagames.dofus.network.messages.game.approach.HelloGameMessage;
   import com.ankamagames.dofus.network.messages.game.approach.ReloginTokenStatusMessage;
   import com.ankamagames.dofus.network.messages.game.approach.ServerOptionalFeaturesMessage;
   import com.ankamagames.dofus.network.messages.game.approach.ServerSessionConstantsMessage;
   import com.ankamagames.dofus.network.messages.game.approach.ServerSettingsMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.AtlasPointInformationsMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassResetMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassUpdatePartyMemberMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassUpdatePvpSeekMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicAckMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicDateMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicLatencyStatsRequestMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicNoOperationMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicTimeMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicWhoIsMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicWhoIsNoMatchMessage;
   import com.ankamagames.dofus.network.messages.game.basic.CurrentServerStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.basic.NumericWhoIsMessage;
   import com.ankamagames.dofus.network.messages.game.basic.SequenceNumberRequestMessage;
   import com.ankamagames.dofus.network.messages.game.basic.TextInformationMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.BasicCharactersListMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharacterSelectedErrorMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharacterSelectedForceMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharacterSelectedSuccessMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharactersListErrorMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharactersListMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharactersListWithRemodelingMessage;
   import com.ankamagames.dofus.network.messages.game.character.creation.CharacterCanBeCreatedResultMessage;
   import com.ankamagames.dofus.network.messages.game.character.creation.CharacterCreationResultMessage;
   import com.ankamagames.dofus.network.messages.game.character.creation.CharacterNameSuggestionFailureMessage;
   import com.ankamagames.dofus.network.messages.game.character.creation.CharacterNameSuggestionSuccessMessage;
   import com.ankamagames.dofus.network.messages.game.character.deletion.CharacterDeletionErrorMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.CharacterExperienceGainMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.CharacterLevelUpInformationMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.CharacterLevelUpMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.CharacterStatsListMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.FighterStatsListMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.LifePointsRegenBeginMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.LifePointsRegenEndMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.UpdateLifePointsMessage;
   import com.ankamagames.dofus.network.messages.game.character.status.PlayerStatusUpdateErrorMessage;
   import com.ankamagames.dofus.network.messages.game.character.status.PlayerStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatAbstractServerMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatAdminServerMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatErrorMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatServerCopyMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatServerCopyWithObjectMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatServerMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatServerWithObjectMessage;
   import com.ankamagames.dofus.network.messages.game.chat.channel.ChannelEnablingChangeMessage;
   import com.ankamagames.dofus.network.messages.game.chat.channel.EnabledChannelsMessage;
   import com.ankamagames.dofus.network.messages.game.chat.community.ChatCommunityChannelCommunityMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.ChatSmileyExtraPackListMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.ChatSmileyMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.LocalizedChatSmileyMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.MoodSmileyResultMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.MoodSmileyUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameCautiousMapMovementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextCreateErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextCreateMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextDestroyMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextMoveElementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextMoveMultipleElementsMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRefreshEntityLookMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveElementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveElementWithEventMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveMultipleElementsMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveMultipleElementsWithEventsMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameEntitiesDispositionMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameEntityDispositionErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameEntityDispositionMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameMapChangeOrientationMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameMapChangeOrientationsMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameMapMovementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameMapNoMovementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameRefreshMonsterBoostsMessage;
   import com.ankamagames.dofus.network.messages.game.context.ShowCellMessage;
   import com.ankamagames.dofus.network.messages.game.context.ShowCellSpectatorMessage;
   import com.ankamagames.dofus.network.messages.game.context.display.DisplayNumericalValuePaddockMessage;
   import com.ankamagames.dofus.network.messages.game.context.dungeon.DungeonKeyRingMessage;
   import com.ankamagames.dofus.network.messages.game.context.dungeon.DungeonKeyRingUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightEndMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightHumanReadyStateMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightJoinMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightNewRoundMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightNewWaveMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightOptionStateUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPauseMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementPossiblePositionsMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsCancelledMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsOfferMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightRemoveTeamMemberMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightResumeMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightResumeWithSlavesMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightSpectateMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightSpectatorJoinMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightStartMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightStartingMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightSynchronizeMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnEndMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnListMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnReadyRequestMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnResumeMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnStartMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnStartPlayingMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightUpdateTeamMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.RefreshCharacterStatsMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.SlaveNoLongerControledMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.SlaveSwitchContextMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.arena.ArenaFighterLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.breach.BreachGameFightEndMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeInfoMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeTargetUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeTargetsListMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.character.GameFightRefreshFighterMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.character.GameFightShowFighterMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.character.GameFightShowFighterRandomStaticPoseMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.GameDataPaddockObjectAddMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.GameDataPaddockObjectListAddMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.GameDataPaddockObjectRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountDataErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountDataMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountEmoteIconUsedOkMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountEquipedErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountReleasedMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountRenamedMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountRidingMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountSetMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountSterilizedMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountUnSetMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountXpRatioMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.PaddockBuyResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.notification.NotificationByServerMessage;
   import com.ankamagames.dofus.network.messages.game.context.notification.NotificationListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.AnomalySubareaInformationResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.CurrentMapInstanceMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.CurrentMapMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.GameRolePlayShowActorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.GameRolePlayShowActorWithEventMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.GameRolePlayShowMultipleActorsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsDataInHavenBagMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsDataInHouseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsDataMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsWithCoordsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapFightCountMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapFightStartPositionsUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapObstacleUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRewardRateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRunningFightDetailsExtendedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRunningFightDetailsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRunningFightListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.TeleportOnSameMapMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.anomaly.AnomalyStateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.anomaly.MapComplementaryInformationsAnomalyMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachBonusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachBudgetMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachCharactersMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachEnterMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachExitResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachSavedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachStateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachTeleportResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.MapComplementaryInformationsBreachMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.branch.BreachBranchesMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachInvitationCloseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachInvitationOfferMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachInvitationResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachKickResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.reward.BreachRewardBoughtMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.reward.BreachRewardsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.reward.BreachSaveBoughtMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.death.GameRolePlayGameOverMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.death.GameRolePlayPlayerLifeStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.GameRolePlayDelayedActionFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.GameRolePlayDelayedActionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.GameRolePlayDelayedObjectUseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.document.ComicReadingBeginMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.document.DocumentReadingBeginMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmoteAddMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmoteListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayAbstractMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayMassiveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmoteRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayAggressionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayFightRequestCanceledMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayMonsterAngryAtPlayerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayMonsterNotAngryAtPlayerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayPlayerFightFriendlyAnsweredMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayPlayerFightFriendlyRequestedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayRemoveChallengeMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayShowChallengeMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaFightPropositionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaFighterStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaInvitationCandidatesAnswer;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaLeagueRewardsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaRegistrationStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaSwitchToFightServerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaSwitchToGameServerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaUpdatePlayerInfosMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.EditHavenBagFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.EditHavenBagStartMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagDailyLoteryMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagFurnituresMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagPackListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.RoomAvailableUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.HavenBagPermissionsUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.InviteInHavenBagClosedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.InviteInHavenBagMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.InviteInHavenBagOfferMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.AccountHouseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HouseBuyResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HousePropertiesMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HouseSellingUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HouseToSellListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.guild.HouseGuildNoneMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.guild.HouseGuildRightsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobAllowMultiCraftRequestMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobBookSubscriptionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryAddMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryEntryMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectorySettingsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobDescriptionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobExperienceMultiUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobExperienceOtherPlayerUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobExperienceUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobLevelUpMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobMultiCraftAvailableSkillsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableCodeResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableShowCodeDialogMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableStateUpdateAbstractMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableStateUpdateHouseDoorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableStateUpdateStorageMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.AlliancePrismDialogQuestionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.AllianceTaxCollectorDialogQuestionExtendedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.EntityTalkMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.MapNpcsQuestStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.NpcDialogCreationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.NpcDialogQuestionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.NpcGenericActionFailureMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.PortalDialogCreationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.TaxCollectorDialogQuestionBasicMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.TaxCollectorDialogQuestionExtendedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundAddedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundListAddedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundRemovedMultipleMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.GameDataPlayFarmObjectAnimationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.PaddockPropertiesMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.PaddockSellBuyDialogMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.PaddockToSellListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.AbstractPartyEventMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.AbstractPartyMemberInFightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.AbstractPartyMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderAvailableDungeonsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderListenErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRegisterErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRegisterSuccessMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRoomContentMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRoomContentUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyCancelInvitationNotificationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyCannotJoinErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyDeletedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyFollowStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationCancelledForGuestMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationDetailsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationDungeonDetailsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationDungeonMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyJoinMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyKickedByMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLeaderUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLocateMembersMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLoyaltyStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyMemberEjectedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyMemberInStandardFightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyMemberRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyModifiableStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNameSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNameUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNewGuestMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNewMemberMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyRefuseInvitationNotificationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyRestrictedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyUpdateLightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.breach.PartyMemberInBreachFightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.entity.PartyEntityUpdateLightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.purchasable.PurchasableDialogMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.FollowedQuestsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestObjectiveValidatedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStartedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStepInfoMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStepStartedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStepValidatedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestValidatedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.spell.SpellVariantActivationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.stats.StatsUpgradeResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntAvailableRetryCountUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntDigRequestAnswerFailedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntDigRequestAnswerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntFlagRequestAnswerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntRequestAnswerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntShowLegendaryUIMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.visual.GameRolePlaySpellAnimMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareCanceledMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareCreatedListMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareCreatedMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareErrorMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareInformationsMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareListMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareRewardConsumeValidationMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareRewardWonMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareRewardsListMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareSubscribedListMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareSubscribedMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareVersatileListMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareWonListMessage;
   import com.ankamagames.dofus.network.messages.game.dare.DareWonMessage;
   import com.ankamagames.dofus.network.messages.game.dialog.LeaveDialogMessage;
   import com.ankamagames.dofus.network.messages.game.dialog.PauseDialogMessage;
   import com.ankamagames.dofus.network.messages.game.entity.EntitiesInformationMessage;
   import com.ankamagames.dofus.network.messages.game.entity.EntityInformationMessage;
   import com.ankamagames.dofus.network.messages.game.finishmoves.FinishMoveListMessage;
   import com.ankamagames.dofus.network.messages.game.friend.AcquaintanceAddedMessage;
   import com.ankamagames.dofus.network.messages.game.friend.AcquaintancesListMessage;
   import com.ankamagames.dofus.network.messages.game.friend.ContactAddFailureMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendAddFailureMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendAddedMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendDeleteResultMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendStatusShareStateMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendWarnOnConnectionStateMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendWarnOnLevelGainStateMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendsListMessage;
   import com.ankamagames.dofus.network.messages.game.friend.GuildMemberWarnOnConnectionStateMessage;
   import com.ankamagames.dofus.network.messages.game.friend.IgnoredAddFailureMessage;
   import com.ankamagames.dofus.network.messages.game.friend.IgnoredAddedMessage;
   import com.ankamagames.dofus.network.messages.game.friend.IgnoredDeleteResultMessage;
   import com.ankamagames.dofus.network.messages.game.friend.IgnoredListMessage;
   import com.ankamagames.dofus.network.messages.game.friend.SpouseInformationsMessage;
   import com.ankamagames.dofus.network.messages.game.friend.SpouseStatusMessage;
   import com.ankamagames.dofus.network.messages.game.friend.WarnOnPermaDeathStateMessage;
   import com.ankamagames.dofus.network.messages.game.guest.GuestLimitationMessage;
   import com.ankamagames.dofus.network.messages.game.guest.GuestModeMessage;
   import com.ankamagames.dofus.network.messages.game.guild.ChallengeFightJoinRefusedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildBulletinMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildBulletinSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildCreationResultMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildCreationStartedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildFactsErrorMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildFactsMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildHouseRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildHouseUpdateInformationMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildHousesInformationMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInAllianceFactsMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsGeneralMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsMemberUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsMembersMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsPaddocksMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInfosUpgradeMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInvitationStateRecrutedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInvitationStateRecruterMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInvitedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildJoinedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildLeftMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildLevelUpMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildListMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMemberLeavingMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMemberOnlineStatusMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMembershipMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildModificationStartedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMotdMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMotdSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildPaddockBoughtMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildPaddockRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildVersatileInfoListMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.AbstractTaxCollectorListMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.GuildFightPlayersEnemiesListMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.GuildFightPlayersEnemyRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.GuildFightPlayersHelpersJoinMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.GuildFightPlayersHelpersLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorAttackedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorAttackedResultMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorErrorMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorListMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorMovementAddMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorMovementMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorMovementRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorMovementsOfflineMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorStateUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TopTaxCollectorListMessage;
   import com.ankamagames.dofus.network.messages.game.idol.IdolFightPreparationUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.idol.IdolListMessage;
   import com.ankamagames.dofus.network.messages.game.idol.IdolPartyLostMessage;
   import com.ankamagames.dofus.network.messages.game.idol.IdolPartyRefreshMessage;
   import com.ankamagames.dofus.network.messages.game.idol.IdolSelectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.idol.IdolSelectedMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.CharacterCapabilitiesMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.CharacterLoadingCompleteMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.OnConnectionEventMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.ServerExperienceModificatorMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.SetCharacterRestrictionsMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveElementUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveMapUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveUseEndedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveUseErrorMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveUsedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.StatedElementUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.StatedMapUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportBuddiesMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportBuddiesRequestedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportToBuddyCloseMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportToBuddyOfferMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.zaap.TeleportDestinationsMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.zaap.ZaapDestinationsMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.zaap.ZaapRespawnUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.KamasUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.ObjectAveragePricesErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.ObjectAveragePricesMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.DecraftResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.EvolutiveObjectRecycleResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseBuyResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseGenericItemAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseGenericItemRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseInListAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseInListRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseInListUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseItemAddOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseItemRemoveOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseUnsoldItemsMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidPriceForSellerMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidPriceMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidSearchOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBuyOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftCountModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftInformationObjectMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftPaymentModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultMagicWithObjectDescMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultWithObjectDescMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultWithObjectIdMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCrafterJobLevelupMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeGuildTaxCollectorGetMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeIsReadyMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeItemAutoCraftStopedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMoneyMovementInformationMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountFreeFromPaddockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountStableErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountSterilizeFromPaddockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsPaddockAddMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsPaddockRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsStableAddMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsStableBornAddMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsStableRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsTakenFromPaddockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeObjectAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeObjectMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeObjectsAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeOfflineSoldItemsMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeOkMultiCraftMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeReplyTaxVendorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeRequestedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeRequestedTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeSellOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockMovementRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockMovementUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockMultiMovementRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockMultiMovementUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeShopStockStartedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkCraftMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkCraftWithInformationMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkEvolutiveObjectRecycleTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkHumanVendorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkJobIndexMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMountMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMountWithOutPaddockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMulticraftCrafterMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMulticraftCustomerMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkNpcShopMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkNpcTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkRecycleTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkRunesTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedBidBuyerMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedBidSellerMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedMountStockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedTaxCollectorShopMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedWithPodsMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedWithStorageMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStoppedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeTypesExchangerDescriptionForUserMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeTypesItemsExchangerDescriptionForUserMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeWaitingResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeWeightMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ItemNoMoreAvailableMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.RecycleResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.UpdateMountCharacteristicsMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeKamaModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectModifiedInBagMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectPutInBagMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectRemovedFromBagMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectsModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectsRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangePodsModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.GoldAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.InventoryContentMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.InventoryWeightMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.LivingObjectMessageMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.MimicryObjectAssociatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.MimicryObjectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.MimicryObjectPreviewMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectDeletedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectJobAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectMovementMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectQuantityMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectsAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectsDeletedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectsQuantityMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObtainedItemMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObtainedItemWithBonusMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.SetUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.SymbioticObjectAssociatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.SymbioticObjectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.WrapperObjectAssociatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.WrapperObjectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.spells.SpellListMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageInventoryContentMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageKamasUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectsRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectsUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.look.AccessoryPreviewErrorMessage;
   import com.ankamagames.dofus.network.messages.game.look.AccessoryPreviewMessage;
   import com.ankamagames.dofus.network.messages.game.moderation.PopupWarningMessage;
   import com.ankamagames.dofus.network.messages.game.modificator.AreaFightModificatorUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.presets.ItemForPresetUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetDeleteResultMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetSaveErrorMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetSavedMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetUseResultMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetUseResultWithMissingIdsMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetsMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismFightAddedMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismFightAttackerAddMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismFightAttackerRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismFightDefenderAddMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismFightDefenderLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismFightRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismFightStateUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismInfoCloseMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismInfoInValidMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismSetSabotagedRefusedMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismSettingsErrorMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismsInfoValidMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismsListMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismsListUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.pvp.AlignmentRankUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.pvp.UpdateMapPlayersAgressableStatusMessage;
   import com.ankamagames.dofus.network.messages.game.pvp.UpdateSelfAgressableStatusMessage;
   import com.ankamagames.dofus.network.messages.game.script.CinematicMessage;
   import com.ankamagames.dofus.network.messages.game.script.URLOpenMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarAddErrorMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarContentMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarRefreshMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarRemoveErrorMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarReplacedMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarSwapErrorMessage;
   import com.ankamagames.dofus.network.messages.game.social.BulletinMessage;
   import com.ankamagames.dofus.network.messages.game.social.ContactLookErrorMessage;
   import com.ankamagames.dofus.network.messages.game.social.ContactLookMessage;
   import com.ankamagames.dofus.network.messages.game.social.SocialNoticeMessage;
   import com.ankamagames.dofus.network.messages.game.social.SocialNoticeSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.startup.StartupActionAddMessage;
   import com.ankamagames.dofus.network.messages.game.startup.StartupActionFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.startup.StartupActionsListMessage;
   import com.ankamagames.dofus.network.messages.game.subscriber.SubscriptionLimitationMessage;
   import com.ankamagames.dofus.network.messages.game.subscriber.SubscriptionZoneMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentGainedMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentLostMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentSelectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentSelectedMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitleGainedMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitleLostMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitleSelectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitleSelectedMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitlesAndOrnamentsListMessage;
   import com.ankamagames.dofus.network.messages.game.ui.ClientUIOpenedByObjectMessage;
   import com.ankamagames.dofus.network.messages.game.ui.ClientUIOpenedMessage;
   import com.ankamagames.dofus.network.messages.handshake.ProtocolRequired;
   import com.ankamagames.dofus.network.messages.queues.LoginQueueStatusMessage;
   import com.ankamagames.dofus.network.messages.queues.QueueStatusMessage;
   import com.ankamagames.dofus.network.messages.secure.TrustStatusMessage;
   import com.ankamagames.dofus.network.messages.security.CheckFileRequestMessage;
   import com.ankamagames.dofus.network.messages.security.RawDataMessage;
   import com.ankamagames.dofus.network.messages.server.basic.SystemMessageDisplayMessage;
   import com.ankamagames.dofus.network.messages.subscription.AccountInformationsUpdateMessage;
   import com.ankamagames.dofus.network.messages.web.ankabox.MailStatusMessage;
   import com.ankamagames.dofus.network.messages.web.ankabox.NewMailMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiApiKeyMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiAuthErrorMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiSessionMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiTokenMessage;
   import com.ankamagames.dofus.network.messages.wtf.ClientYouAreDrunkMessage;
   import com.ankamagames.jerakine.logger.Log;
   import com.ankamagames.jerakine.logger.Logger;
   import com.ankamagames.jerakine.managers.StoreDataManager;
   import com.ankamagames.jerakine.network.ICustomDataInput;
   import com.ankamagames.jerakine.network.INetworkMessage;
   import com.ankamagames.jerakine.network.RawDataParser;
   import com.ankamagames.jerakine.network.UnpackMode;
   import flash.utils.Dictionary;
   import flash.utils.getQualifiedClassName;
   
   public class MessageReceiver implements RawDataParser
   {
      
      private static const _log:Logger = Log.getLogger(getQualifiedClassName(MessageReceiver));
      
      private static const _messagesTypes:Dictionary = new Dictionary();
      
      private static const _unpackModes:Dictionary = new Dictionary();
      
      {
         _messagesTypes[2] = NetworkDataContainerMessage;
         _messagesTypes[1] = ProtocolRequired;
         _messagesTypes[10] = LoginQueueStatusMessage;
         _messagesTypes[6100] = QueueStatusMessage;
         _messagesTypes[75] = ConsoleMessage;
         _messagesTypes[6127] = ConsoleCommandsListMessage;
         _messagesTypes[3] = HelloConnectMessage;
         _messagesTypes[6314] = CredentialsAcknowledgementMessage;
         _messagesTypes[5640] = NicknameRegistrationMessage;
         _messagesTypes[6607] = AccountLinkRequiredMessage;
         _messagesTypes[5638] = NicknameRefusedMessage;
         _messagesTypes[5641] = NicknameAcceptedMessage;
         _messagesTypes[22] = IdentificationSuccessMessage;
         _messagesTypes[6209] = IdentificationSuccessWithLoginTokenMessage;
         _messagesTypes[20] = IdentificationFailedMessage;
         _messagesTypes[6174] = IdentificationFailedBannedMessage;
         _messagesTypes[21] = IdentificationFailedForBadVersionMessage;
         _messagesTypes[30] = ServersListMessage;
         _messagesTypes[50] = ServerStatusUpdateMessage;
         _messagesTypes[42] = SelectedServerDataMessage;
         _messagesTypes[6469] = SelectedServerDataExtendedMessage;
         _messagesTypes[41] = SelectedServerRefusedMessage;
         _messagesTypes[6143] = AcquaintanceSearchErrorMessage;
         _messagesTypes[6142] = AcquaintanceServerListMessage;
         _messagesTypes[6731] = MigratedServerListMessage;
         _messagesTypes[101] = HelloGameMessage;
         _messagesTypes[111] = AuthenticationTicketAcceptedMessage;
         _messagesTypes[112] = AuthenticationTicketRefusedMessage;
         _messagesTypes[109] = AlreadyConnectedMessage;
         _messagesTypes[6029] = AccountLoggingKickedMessage;
         _messagesTypes[6539] = ReloginTokenStatusMessage;
         _messagesTypes[6340] = ServerSettingsMessage;
         _messagesTypes[6434] = ServerSessionConstantsMessage;
         _messagesTypes[6305] = ServerOptionalFeaturesMessage;
         _messagesTypes[6216] = AccountCapabilitiesMessage;
         _messagesTypes[6267] = TrustStatusMessage;
         _messagesTypes[6740] = AccountInformationsUpdateMessage;
         _messagesTypes[6154] = CheckFileRequestMessage;
         _messagesTypes[6253] = RawDataMessage;
         _messagesTypes[1301] = StartupActionsListMessage;
         _messagesTypes[6538] = StartupActionAddMessage;
         _messagesTypes[1304] = StartupActionFinishedMessage;
         _messagesTypes[6733] = CharacterCanBeCreatedResultMessage;
         _messagesTypes[161] = CharacterCreationResultMessage;
         _messagesTypes[166] = CharacterDeletionErrorMessage;
         _messagesTypes[5544] = CharacterNameSuggestionSuccessMessage;
         _messagesTypes[164] = CharacterNameSuggestionFailureMessage;
         _messagesTypes[6475] = BasicCharactersListMessage;
         _messagesTypes[151] = CharactersListMessage;
         _messagesTypes[6550] = CharactersListWithRemodelingMessage;
         _messagesTypes[5545] = CharactersListErrorMessage;
         _messagesTypes[153] = CharacterSelectedSuccessMessage;
         _messagesTypes[6068] = CharacterSelectedForceMessage;
         _messagesTypes[5836] = CharacterSelectedErrorMessage;
         _messagesTypes[6134] = PopupWarningMessage;
         _messagesTypes[177] = BasicDateMessage;
         _messagesTypes[175] = BasicTimeMessage;
         _messagesTypes[6341] = AlmanachCalendarDateMessage;
         _messagesTypes[176] = BasicNoOperationMessage;
         _messagesTypes[6362] = BasicAckMessage;
         _messagesTypes[189] = SystemMessageDisplayMessage;
         _messagesTypes[780] = TextInformationMessage;
         _messagesTypes[5726] = OnConnectionEventMessage;
         _messagesTypes[170] = SetCharacterRestrictionsMessage;
         _messagesTypes[6237] = ServerExperienceModificatorMessage;
         _messagesTypes[6339] = CharacterCapabilitiesMessage;
         _messagesTypes[6471] = CharacterLoadingCompleteMessage;
         _messagesTypes[200] = GameContextCreateMessage;
         _messagesTypes[6024] = GameContextCreateErrorMessage;
         _messagesTypes[201] = GameContextDestroyMessage;
         _messagesTypes[251] = GameContextRemoveElementMessage;
         _messagesTypes[252] = GameContextRemoveMultipleElementsMessage;
         _messagesTypes[6412] = GameContextRemoveElementWithEventMessage;
         _messagesTypes[6416] = GameContextRemoveMultipleElementsWithEventsMessage;
         _messagesTypes[253] = GameContextMoveElementMessage;
         _messagesTypes[254] = GameContextMoveMultipleElementsMessage;
         _messagesTypes[5637] = GameContextRefreshEntityLookMessage;
         _messagesTypes[954] = GameMapNoMovementMessage;
         _messagesTypes[951] = GameMapMovementMessage;
         _messagesTypes[6497] = GameCautiousMapMovementMessage;
         _messagesTypes[946] = GameMapChangeOrientationMessage;
         _messagesTypes[6155] = GameMapChangeOrientationsMessage;
         _messagesTypes[5693] = GameEntityDispositionMessage;
         _messagesTypes[5696] = GameEntitiesDispositionMessage;
         _messagesTypes[5695] = GameEntityDispositionErrorMessage;
         _messagesTypes[6618] = GameRefreshMonsterBoostsMessage;
         _messagesTypes[6385] = PlayerStatusUpdateErrorMessage;
         _messagesTypes[6386] = PlayerStatusUpdateMessage;
         _messagesTypes[180] = BasicWhoIsMessage;
         _messagesTypes[179] = BasicWhoIsNoMatchMessage;
         _messagesTypes[6297] = NumericWhoIsMessage;
         _messagesTypes[183] = BasicPongMessage;
         _messagesTypes[5816] = BasicLatencyStatsRequestMessage;
         _messagesTypes[6316] = SequenceNumberRequestMessage;
         _messagesTypes[6525] = CurrentServerStatusUpdateMessage;
         _messagesTypes[6053] = CinematicMessage;
         _messagesTypes[6266] = URLOpenMessage;
         _messagesTypes[2001] = DebugHighlightCellsMessage;
         _messagesTypes[2002] = DebugClearHighlightCellsMessage;
         _messagesTypes[6028] = DebugInClientMessage;
         _messagesTypes[6594] = ClientYouAreDrunkMessage;
         _messagesTypes[6563] = DisplayNumericalValuePaddockMessage;
         _messagesTypes[220] = CurrentMapMessage;
         _messagesTypes[6738] = CurrentMapInstanceMessage;
         _messagesTypes[6048] = TeleportOnSameMapMessage;
         _messagesTypes[210] = MapFightCountMessage;
         _messagesTypes[5743] = MapRunningFightListMessage;
         _messagesTypes[5751] = MapRunningFightDetailsMessage;
         _messagesTypes[6500] = MapRunningFightDetailsExtendedMessage;
         _messagesTypes[6051] = MapObstacleUpdateMessage;
         _messagesTypes[226] = MapComplementaryInformationsDataMessage;
         _messagesTypes[6130] = MapComplementaryInformationsDataInHouseMessage;
         _messagesTypes[6268] = MapComplementaryInformationsWithCoordsMessage;
         _messagesTypes[6827] = MapRewardRateMessage;
         _messagesTypes[6810] = BreachEnterMessage;
         _messagesTypes[6816] = BreachTeleportResponseMessage;
         _messagesTypes[6814] = BreachExitResponseMessage;
         _messagesTypes[6791] = MapComplementaryInformationsBreachMessage;
         _messagesTypes[6809] = BreachGameFightEndMessage;
         _messagesTypes[6831] = AnomalyStateMessage;
         _messagesTypes[6828] = MapComplementaryInformationsAnomalyMessage;
         _messagesTypes[6716] = MapFightStartPositionsUpdateMessage;
         _messagesTypes[5632] = GameRolePlayShowActorMessage;
         _messagesTypes[6712] = GameRolePlayShowMultipleActorsMessage;
         _messagesTypes[6407] = GameRolePlayShowActorWithEventMessage;
         _messagesTypes[500] = CharacterStatsListMessage;
         _messagesTypes[6322] = FighterStatsListMessage;
         _messagesTypes[5670] = CharacterLevelUpMessage;
         _messagesTypes[6321] = CharacterExperienceGainMessage;
         _messagesTypes[6076] = CharacterLevelUpInformationMessage;
         _messagesTypes[5658] = UpdateLifePointsMessage;
         _messagesTypes[5684] = LifePointsRegenBeginMessage;
         _messagesTypes[5686] = LifePointsRegenEndMessage;
         _messagesTypes[5996] = GameRolePlayPlayerLifeStatusMessage;
         _messagesTypes[746] = GameRolePlayGameOverMessage;
         _messagesTypes[5822] = GameRolePlayFightRequestCanceledMessage;
         _messagesTypes[6073] = GameRolePlayAggressionMessage;
         _messagesTypes[5937] = GameRolePlayPlayerFightFriendlyRequestedMessage;
         _messagesTypes[5733] = GameRolePlayPlayerFightFriendlyAnsweredMessage;
         _messagesTypes[6284] = GameRolePlayArenaRegistrationStatusMessage;
         _messagesTypes[6276] = GameRolePlayArenaFightPropositionMessage;
         _messagesTypes[6281] = GameRolePlayArenaFighterStatusMessage;
         _messagesTypes[6301] = GameRolePlayArenaUpdatePlayerInfosMessage;
         _messagesTypes[6728] = GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;
         _messagesTypes[6575] = GameRolePlayArenaSwitchToFightServerMessage;
         _messagesTypes[6574] = GameRolePlayArenaSwitchToGameServerMessage;
         _messagesTypes[6783] = GameRolePlayArenaInvitationCandidatesAnswer;
         _messagesTypes[6785] = GameRolePlayArenaLeagueRewardsMessage;
         _messagesTypes[6741] = GameRolePlayMonsterAngryAtPlayerMessage;
         _messagesTypes[6742] = GameRolePlayMonsterNotAngryAtPlayerMessage;
         _messagesTypes[301] = GameRolePlayShowChallengeMessage;
         _messagesTypes[300] = GameRolePlayRemoveChallengeMessage;
         _messagesTypes[6114] = GameRolePlaySpellAnimMessage;
         _messagesTypes[6153] = GameRolePlayDelayedActionMessage;
         _messagesTypes[6425] = GameRolePlayDelayedObjectUseMessage;
         _messagesTypes[6150] = GameRolePlayDelayedActionFinishedMessage;
         _messagesTypes[5612] = ShowCellMessage;
         _messagesTypes[6158] = ShowCellSpectatorMessage;
         _messagesTypes[700] = GameFightStartingMessage;
         _messagesTypes[702] = GameFightJoinMessage;
         _messagesTypes[6504] = GameFightSpectatorJoinMessage;
         _messagesTypes[703] = GameFightPlacementPossiblePositionsMessage;
         _messagesTypes[6548] = GameFightPlacementSwapPositionsErrorMessage;
         _messagesTypes[6542] = GameFightPlacementSwapPositionsOfferMessage;
         _messagesTypes[6546] = GameFightPlacementSwapPositionsCancelledMessage;
         _messagesTypes[6544] = GameFightPlacementSwapPositionsMessage;
         _messagesTypes[5927] = GameFightOptionStateUpdateMessage;
         _messagesTypes[5572] = GameFightUpdateTeamMessage;
         _messagesTypes[711] = GameFightRemoveTeamMemberMessage;
         _messagesTypes[740] = GameFightHumanReadyStateMessage;
         _messagesTypes[721] = GameFightLeaveMessage;
         _messagesTypes[712] = GameFightStartMessage;
         _messagesTypes[6069] = GameFightSpectateMessage;
         _messagesTypes[6067] = GameFightResumeMessage;
         _messagesTypes[6215] = GameFightResumeWithSlavesMessage;
         _messagesTypes[720] = GameFightEndMessage;
         _messagesTypes[6239] = GameFightNewRoundMessage;
         _messagesTypes[713] = GameFightTurnListMessage;
         _messagesTypes[714] = GameFightTurnStartMessage;
         _messagesTypes[6490] = GameFightNewWaveMessage;
         _messagesTypes[6465] = GameFightTurnStartPlayingMessage;
         _messagesTypes[6307] = GameFightTurnResumeMessage;
         _messagesTypes[6754] = GameFightPauseMessage;
         _messagesTypes[6214] = SlaveSwitchContextMessage;
         _messagesTypes[6807] = SlaveNoLongerControledMessage;
         _messagesTypes[6699] = RefreshCharacterStatsMessage;
         _messagesTypes[715] = GameFightTurnReadyRequestMessage;
         _messagesTypes[5921] = GameFightSynchronizeMessage;
         _messagesTypes[719] = GameFightTurnEndMessage;
         _messagesTypes[5864] = GameFightShowFighterMessage;
         _messagesTypes[6309] = GameFightRefreshFighterMessage;
         _messagesTypes[6218] = GameFightShowFighterRandomStaticPoseMessage;
         _messagesTypes[6700] = ArenaFighterLeaveMessage;
         _messagesTypes[955] = SequenceStartMessage;
         _messagesTypes[956] = SequenceEndMessage;
         _messagesTypes[1000] = AbstractGameActionMessage;
         _messagesTypes[1002] = GameActionNoopMessage;
         _messagesTypes[1001] = AbstractGameActionWithAckMessage;
         _messagesTypes[6132] = GameActionFightNoSpellCastMessage;
         _messagesTypes[6118] = AbstractGameActionFightTargetedAbilityMessage;
         _messagesTypes[1010] = GameActionFightSpellCastMessage;
         _messagesTypes[6116] = GameActionFightCloseCombatMessage;
         _messagesTypes[6320] = GameActionFightInvisibleDetectedMessage;
         _messagesTypes[1030] = GameActionFightPointsVariationMessage;
         _messagesTypes[1004] = GameActionFightTackledMessage;
         _messagesTypes[1099] = GameActionFightDeathMessage;
         _messagesTypes[5571] = GameActionFightKillMessage;
         _messagesTypes[6217] = GameActionFightVanishMessage;
         _messagesTypes[6219] = GameActionFightSpellCooldownVariationMessage;
         _messagesTypes[6221] = GameActionFightSpellImmunityMessage;
         _messagesTypes[6311] = GameActionFightLifePointsGainMessage;
         _messagesTypes[6312] = GameActionFightLifePointsLostMessage;
         _messagesTypes[6310] = GameActionFightLifeAndShieldPointsLostMessage;
         _messagesTypes[6070] = GameActionFightDispellableEffectMessage;
         _messagesTypes[5531] = GameActionFightReflectSpellMessage;
         _messagesTypes[5526] = GameActionFightReduceDamagesMessage;
         _messagesTypes[5530] = GameActionFightReflectDamagesMessage;
         _messagesTypes[5828] = GameActionFightDodgePointLossMessage;
         _messagesTypes[5525] = GameActionFightSlideMessage;
         _messagesTypes[5528] = GameActionFightTeleportOnSameMapMessage;
         _messagesTypes[5527] = GameActionFightExchangePositionsMessage;
         _messagesTypes[5533] = GameActionFightDispellMessage;
         _messagesTypes[6113] = GameActionFightDispellEffectMessage;
         _messagesTypes[6176] = GameActionFightDispellSpellMessage;
         _messagesTypes[6304] = GameActionFightModifyEffectsDurationMessage;
         _messagesTypes[6147] = GameActionFightTriggerEffectMessage;
         _messagesTypes[5535] = GameActionFightStealKamaMessage;
         _messagesTypes[5532] = GameActionFightChangeLookMessage;
         _messagesTypes[5821] = GameActionFightInvisibilityMessage;
         _messagesTypes[5825] = GameActionFightSummonMessage;
         _messagesTypes[5540] = GameActionFightMarkCellsMessage;
         _messagesTypes[5570] = GameActionFightUnmarkCellsMessage;
         _messagesTypes[5741] = GameActionFightTriggerGlyphTrapMessage;
         _messagesTypes[6545] = GameActionFightActivateGlyphTrapMessage;
         _messagesTypes[5830] = GameActionFightCarryCharacterMessage;
         _messagesTypes[5829] = GameActionFightThrowCharacterMessage;
         _messagesTypes[5826] = GameActionFightDropCharacterMessage;
         _messagesTypes[5689] = EmoteListMessage;
         _messagesTypes[5644] = EmoteAddMessage;
         _messagesTypes[5687] = EmoteRemoveMessage;
         _messagesTypes[5690] = EmotePlayAbstractMessage;
         _messagesTypes[5683] = EmotePlayMessage;
         _messagesTypes[5691] = EmotePlayMassiveMessage;
         _messagesTypes[5688] = EmotePlayErrorMessage;
         _messagesTypes[801] = ChatSmileyMessage;
         _messagesTypes[6730] = ChatCommunityChannelCommunityMessage;
         _messagesTypes[6185] = LocalizedChatSmileyMessage;
         _messagesTypes[6196] = MoodSmileyResultMessage;
         _messagesTypes[6388] = MoodSmileyUpdateMessage;
         _messagesTypes[6596] = ChatSmileyExtraPackListMessage;
         _messagesTypes[880] = ChatAbstractServerMessage;
         _messagesTypes[881] = ChatServerMessage;
         _messagesTypes[6135] = ChatAdminServerMessage;
         _messagesTypes[883] = ChatServerWithObjectMessage;
         _messagesTypes[882] = ChatServerCopyMessage;
         _messagesTypes[884] = ChatServerCopyWithObjectMessage;
         _messagesTypes[870] = ChatErrorMessage;
         _messagesTypes[892] = EnabledChannelsMessage;
         _messagesTypes[891] = ChannelEnablingChangeMessage;
         _messagesTypes[1200] = SpellListMessage;
         _messagesTypes[5502] = LeaveDialogMessage;
         _messagesTypes[6012] = PauseDialogMessage;
         _messagesTypes[6384] = InteractiveUseErrorMessage;
         _messagesTypes[5745] = InteractiveUsedMessage;
         _messagesTypes[6112] = InteractiveUseEndedMessage;
         _messagesTypes[5002] = InteractiveMapUpdateMessage;
         _messagesTypes[5716] = StatedMapUpdateMessage;
         _messagesTypes[5708] = InteractiveElementUpdatedMessage;
         _messagesTypes[5709] = StatedElementUpdatedMessage;
         _messagesTypes[6571] = ZaapRespawnUpdatedMessage;
         _messagesTypes[6829] = TeleportDestinationsMessage;
         _messagesTypes[6830] = ZaapDestinationsMessage;
         _messagesTypes[6289] = TeleportBuddiesMessage;
         _messagesTypes[6302] = TeleportBuddiesRequestedMessage;
         _messagesTypes[6287] = TeleportToBuddyOfferMessage;
         _messagesTypes[6303] = TeleportToBuddyCloseMessage;
         _messagesTypes[6705] = SpellVariantActivationMessage;
         _messagesTypes[5609] = StatsUpgradeResultMessage;
         _messagesTypes[5613] = ChallengeTargetsListMessage;
         _messagesTypes[6022] = ChallengeInfoMessage;
         _messagesTypes[6123] = ChallengeTargetUpdateMessage;
         _messagesTypes[6019] = ChallengeResultMessage;
         _messagesTypes[6771] = EntityInformationMessage;
         _messagesTypes[6775] = EntitiesInformationMessage;
         _messagesTypes[6584] = IdolSelectErrorMessage;
         _messagesTypes[6581] = IdolSelectedMessage;
         _messagesTypes[6585] = IdolListMessage;
         _messagesTypes[6583] = IdolPartyRefreshMessage;
         _messagesTypes[6580] = IdolPartyLostMessage;
         _messagesTypes[6586] = IdolFightPreparationUpdateMessage;
         _messagesTypes[6205] = AchievementListMessage;
         _messagesTypes[6378] = AchievementDetailsMessage;
         _messagesTypes[6358] = AchievementDetailedListMessage;
         _messagesTypes[6208] = AchievementFinishedMessage;
         _messagesTypes[6381] = AchievementFinishedInformationMessage;
         _messagesTypes[6376] = AchievementRewardSuccessMessage;
         _messagesTypes[6375] = AchievementRewardErrorMessage;
         _messagesTypes[6383] = FriendGuildWarnOnAchievementCompleteStateMessage;
         _messagesTypes[6299] = DungeonKeyRingMessage;
         _messagesTypes[6296] = DungeonKeyRingUpdateMessage;
         _messagesTypes[6454] = UpdateMapPlayersAgressableStatusMessage;
         _messagesTypes[6456] = UpdateSelfAgressableStatusMessage;
         _messagesTypes[6058] = AlignmentRankUpdateMessage;
         _messagesTypes[5584] = CompassResetMessage;
         _messagesTypes[5591] = CompassUpdateMessage;
         _messagesTypes[5589] = CompassUpdatePartyMemberMessage;
         _messagesTypes[5956] = AtlasPointInformationsMessage;
         _messagesTypes[6013] = CompassUpdatePvpSeekMessage;
         _messagesTypes[6274] = AbstractPartyMessage;
         _messagesTypes[6273] = AbstractPartyEventMessage;
         _messagesTypes[6277] = PartyModifiableStatusMessage;
         _messagesTypes[5586] = PartyInvitationMessage;
         _messagesTypes[6244] = PartyInvitationDungeonMessage;
         _messagesTypes[6263] = PartyInvitationDetailsMessage;
         _messagesTypes[6262] = PartyInvitationDungeonDetailsMessage;
         _messagesTypes[6256] = PartyInvitationCancelledForGuestMessage;
         _messagesTypes[6251] = PartyCancelInvitationNotificationMessage;
         _messagesTypes[5596] = PartyRefuseInvitationNotificationMessage;
         _messagesTypes[5583] = PartyCannotJoinErrorMessage;
         _messagesTypes[5576] = PartyJoinMessage;
         _messagesTypes[6260] = PartyNewGuestMessage;
         _messagesTypes[5575] = PartyUpdateMessage;
         _messagesTypes[6306] = PartyNewMemberMessage;
         _messagesTypes[6054] = PartyUpdateLightMessage;
         _messagesTypes[6781] = PartyEntityUpdateLightMessage;
         _messagesTypes[5579] = PartyMemberRemoveMessage;
         _messagesTypes[6252] = PartyMemberEjectedMessage;
         _messagesTypes[5578] = PartyLeaderUpdateMessage;
         _messagesTypes[5581] = PartyFollowStatusUpdateMessage;
         _messagesTypes[5595] = PartyLocateMembersMessage;
         _messagesTypes[5594] = PartyLeaveMessage;
         _messagesTypes[5590] = PartyKickedByMessage;
         _messagesTypes[6175] = PartyRestrictedMessage;
         _messagesTypes[6261] = PartyDeletedMessage;
         _messagesTypes[6270] = PartyLoyaltyStatusMessage;
         _messagesTypes[6825] = AbstractPartyMemberInFightMessage;
         _messagesTypes[6826] = PartyMemberInStandardFightMessage;
         _messagesTypes[6824] = PartyMemberInBreachFightMessage;
         _messagesTypes[6502] = PartyNameUpdateMessage;
         _messagesTypes[6501] = PartyNameSetErrorMessage;
         _messagesTypes[6242] = DungeonPartyFinderAvailableDungeonsMessage;
         _messagesTypes[6248] = DungeonPartyFinderListenErrorMessage;
         _messagesTypes[6247] = DungeonPartyFinderRoomContentMessage;
         _messagesTypes[6250] = DungeonPartyFinderRoomContentUpdateMessage;
         _messagesTypes[6241] = DungeonPartyFinderRegisterSuccessMessage;
         _messagesTypes[6243] = DungeonPartyFinderRegisterErrorMessage;
         _messagesTypes[6821] = ContactAddFailureMessage;
         _messagesTypes[6265] = SpouseStatusMessage;
         _messagesTypes[4002] = FriendsListMessage;
         _messagesTypes[6820] = AcquaintancesListMessage;
         _messagesTypes[6356] = SpouseInformationsMessage;
         _messagesTypes[5600] = FriendAddFailureMessage;
         _messagesTypes[6818] = AcquaintanceAddedMessage;
         _messagesTypes[5599] = FriendAddedMessage;
         _messagesTypes[5924] = FriendUpdateMessage;
         _messagesTypes[5601] = FriendDeleteResultMessage;
         _messagesTypes[5630] = FriendWarnOnConnectionStateMessage;
         _messagesTypes[6513] = WarnOnPermaDeathStateMessage;
         _messagesTypes[6078] = FriendWarnOnLevelGainStateMessage;
         _messagesTypes[6823] = FriendStatusShareStateMessage;
         _messagesTypes[5674] = IgnoredListMessage;
         _messagesTypes[5679] = IgnoredAddFailureMessage;
         _messagesTypes[5678] = IgnoredAddedMessage;
         _messagesTypes[5677] = IgnoredDeleteResultMessage;
         _messagesTypes[6394] = AllianceCreationStartedMessage;
         _messagesTypes[6444] = AllianceModificationStartedMessage;
         _messagesTypes[6391] = AllianceCreationResultMessage;
         _messagesTypes[6397] = AllianceInvitedMessage;
         _messagesTypes[6396] = AllianceInvitationStateRecruterMessage;
         _messagesTypes[6392] = AllianceInvitationStateRecrutedMessage;
         _messagesTypes[6402] = AllianceJoinedMessage;
         _messagesTypes[6399] = AllianceGuildLeavingMessage;
         _messagesTypes[6398] = AllianceLeftMessage;
         _messagesTypes[6390] = AllianceMembershipMessage;
         _messagesTypes[6439] = KohUpdateMessage;
         _messagesTypes[6493] = AreaFightModificatorUpdateMessage;
         _messagesTypes[6459] = ClientUIOpenedMessage;
         _messagesTypes[6463] = ClientUIOpenedByObjectMessage;
         _messagesTypes[5920] = GuildCreationStartedMessage;
         _messagesTypes[6324] = GuildModificationStartedMessage;
         _messagesTypes[5554] = GuildCreationResultMessage;
         _messagesTypes[5552] = GuildInvitedMessage;
         _messagesTypes[5563] = GuildInvitationStateRecruterMessage;
         _messagesTypes[5548] = GuildInvitationStateRecrutedMessage;
         _messagesTypes[5564] = GuildJoinedMessage;
         _messagesTypes[6061] = GuildMemberOnlineStatusMessage;
         _messagesTypes[5557] = GuildInformationsGeneralMessage;
         _messagesTypes[5558] = GuildInformationsMembersMessage;
         _messagesTypes[5597] = GuildInformationsMemberUpdateMessage;
         _messagesTypes[5959] = GuildInformationsPaddocksMessage;
         _messagesTypes[5923] = GuildMemberLeavingMessage;
         _messagesTypes[5562] = GuildLeftMessage;
         _messagesTypes[5835] = GuildMembershipMessage;
         _messagesTypes[6062] = GuildLevelUpMessage;
         _messagesTypes[5636] = GuildInfosUpgradeMessage;
         _messagesTypes[5919] = GuildHousesInformationMessage;
         _messagesTypes[6181] = GuildHouseUpdateInformationMessage;
         _messagesTypes[6180] = GuildHouseRemoveMessage;
         _messagesTypes[5952] = GuildPaddockBoughtMessage;
         _messagesTypes[5955] = GuildPaddockRemovedMessage;
         _messagesTypes[6160] = GuildMemberWarnOnConnectionStateMessage;
         _messagesTypes[6590] = GuildMotdMessage;
         _messagesTypes[6591] = GuildMotdSetErrorMessage;
         _messagesTypes[6689] = GuildBulletinMessage;
         _messagesTypes[6691] = GuildBulletinSetErrorMessage;
         _messagesTypes[6424] = GuildFactsErrorMessage;
         _messagesTypes[6415] = GuildFactsMessage;
         _messagesTypes[6422] = GuildInAllianceFactsMessage;
         _messagesTypes[6423] = AllianceFactsErrorMessage;
         _messagesTypes[6414] = AllianceFactsMessage;
         _messagesTypes[6413] = GuildListMessage;
         _messagesTypes[6435] = GuildVersatileInfoListMessage;
         _messagesTypes[6408] = AllianceListMessage;
         _messagesTypes[6436] = AllianceVersatileInfoListMessage;
         _messagesTypes[6427] = AlliancePartialListMessage;
         _messagesTypes[6403] = AllianceInsiderInfoMessage;
         _messagesTypes[6685] = AllianceMotdMessage;
         _messagesTypes[6683] = AllianceMotdSetErrorMessage;
         _messagesTypes[6690] = AllianceBulletinMessage;
         _messagesTypes[6692] = AllianceBulletinSetErrorMessage;
         _messagesTypes[5633] = TaxCollectorMovementMessage;
         _messagesTypes[5634] = TaxCollectorErrorMessage;
         _messagesTypes[6568] = AbstractTaxCollectorListMessage;
         _messagesTypes[5930] = TaxCollectorListMessage;
         _messagesTypes[6565] = TopTaxCollectorListMessage;
         _messagesTypes[6455] = TaxCollectorStateUpdateMessage;
         _messagesTypes[5917] = TaxCollectorMovementAddMessage;
         _messagesTypes[5915] = TaxCollectorMovementRemoveMessage;
         _messagesTypes[5918] = TaxCollectorAttackedMessage;
         _messagesTypes[5635] = TaxCollectorAttackedResultMessage;
         _messagesTypes[5720] = GuildFightPlayersHelpersJoinMessage;
         _messagesTypes[5719] = GuildFightPlayersHelpersLeaveMessage;
         _messagesTypes[5928] = GuildFightPlayersEnemiesListMessage;
         _messagesTypes[5929] = GuildFightPlayersEnemyRemoveMessage;
         _messagesTypes[6611] = TaxCollectorMovementsOfflineMessage;
         _messagesTypes[6466] = PrismSetSabotagedRefusedMessage;
         _messagesTypes[5895] = PrismFightDefenderAddMessage;
         _messagesTypes[5892] = PrismFightDefenderLeaveMessage;
         _messagesTypes[5893] = PrismFightAttackerAddMessage;
         _messagesTypes[5897] = PrismFightAttackerRemoveMessage;
         _messagesTypes[6440] = PrismsListMessage;
         _messagesTypes[6438] = PrismsListUpdateMessage;
         _messagesTypes[5908] = ChallengeFightJoinRefusedMessage;
         _messagesTypes[5853] = PrismInfoCloseMessage;
         _messagesTypes[6451] = PrismsInfoValidMessage;
         _messagesTypes[6452] = PrismFightAddedMessage;
         _messagesTypes[6453] = PrismFightRemovedMessage;
         _messagesTypes[5859] = PrismInfoInValidMessage;
         _messagesTypes[6040] = PrismFightStateUpdateMessage;
         _messagesTypes[6442] = PrismSettingsErrorMessage;
         _messagesTypes[6661] = DareListMessage;
         _messagesTypes[6657] = DareVersatileListMessage;
         _messagesTypes[6658] = DareSubscribedListMessage;
         _messagesTypes[6682] = DareWonListMessage;
         _messagesTypes[6663] = DareCreatedListMessage;
         _messagesTypes[6656] = DareInformationsMessage;
         _messagesTypes[6667] = DareErrorMessage;
         _messagesTypes[6679] = DareCanceledMessage;
         _messagesTypes[6681] = DareWonMessage;
         _messagesTypes[6660] = DareSubscribedMessage;
         _messagesTypes[6668] = DareCreatedMessage;
         _messagesTypes[6677] = DareRewardsListMessage;
         _messagesTypes[6678] = DareRewardWonMessage;
         _messagesTypes[6675] = DareRewardConsumeValidationMessage;
         _messagesTypes[5626] = QuestListMessage;
         _messagesTypes[6091] = QuestStartedMessage;
         _messagesTypes[6097] = QuestValidatedMessage;
         _messagesTypes[6098] = QuestObjectiveValidatedMessage;
         _messagesTypes[6099] = QuestStepValidatedMessage;
         _messagesTypes[6096] = QuestStepStartedMessage;
         _messagesTypes[5625] = QuestStepInfoMessage;
         _messagesTypes[6717] = FollowedQuestsMessage;
         _messagesTypes[6087] = NotificationListMessage;
         _messagesTypes[6103] = NotificationByServerMessage;
         _messagesTypes[5542] = SubscriptionLimitationMessage;
         _messagesTypes[5573] = SubscriptionZoneMessage;
         _messagesTypes[6506] = GuestLimitationMessage;
         _messagesTypes[6505] = GuestModeMessage;
         _messagesTypes[5642] = MapNpcsQuestStatusUpdateMessage;
         _messagesTypes[5900] = NpcGenericActionFailureMessage;
         _messagesTypes[6737] = PortalDialogCreationMessage;
         _messagesTypes[5618] = NpcDialogCreationMessage;
         _messagesTypes[5617] = NpcDialogQuestionMessage;
         _messagesTypes[5619] = TaxCollectorDialogQuestionBasicMessage;
         _messagesTypes[5615] = TaxCollectorDialogQuestionExtendedMessage;
         _messagesTypes[6445] = AllianceTaxCollectorDialogQuestionExtendedMessage;
         _messagesTypes[6448] = AlliancePrismDialogQuestionMessage;
         _messagesTypes[6110] = EntityTalkMessage;
         _messagesTypes[5655] = JobDescriptionMessage;
         _messagesTypes[5656] = JobLevelUpMessage;
         _messagesTypes[5809] = JobExperienceMultiUpdateMessage;
         _messagesTypes[5654] = JobExperienceUpdateMessage;
         _messagesTypes[6599] = JobExperienceOtherPlayerUpdateMessage;
         _messagesTypes[5748] = JobAllowMultiCraftRequestMessage;
         _messagesTypes[5747] = JobMultiCraftAvailableSkillsMessage;
         _messagesTypes[6046] = JobCrafterDirectoryListMessage;
         _messagesTypes[5652] = JobCrafterDirectorySettingsMessage;
         _messagesTypes[6593] = JobBookSubscriptionMessage;
         _messagesTypes[5653] = JobCrafterDirectoryRemoveMessage;
         _messagesTypes[5651] = JobCrafterDirectoryAddMessage;
         _messagesTypes[6044] = JobCrafterDirectoryEntryMessage;
         _messagesTypes[5537] = KamasUpdateMessage;
         _messagesTypes[3017] = ObjectGroundAddedMessage;
         _messagesTypes[5925] = ObjectGroundListAddedMessage;
         _messagesTypes[3014] = ObjectGroundRemovedMessage;
         _messagesTypes[5944] = ObjectGroundRemovedMultipleMessage;
         _messagesTypes[3016] = InventoryContentMessage;
         _messagesTypes[6231] = ShortcutBarContentMessage;
         _messagesTypes[6227] = ShortcutBarAddErrorMessage;
         _messagesTypes[6222] = ShortcutBarRemoveErrorMessage;
         _messagesTypes[6226] = ShortcutBarSwapErrorMessage;
         _messagesTypes[6229] = ShortcutBarRefreshMessage;
         _messagesTypes[6224] = ShortcutBarRemovedMessage;
         _messagesTypes[6706] = ShortcutBarReplacedMessage;
         _messagesTypes[5646] = StorageInventoryContentMessage;
         _messagesTypes[5645] = StorageKamasUpdateMessage;
         _messagesTypes[5647] = StorageObjectUpdateMessage;
         _messagesTypes[6036] = StorageObjectsUpdateMessage;
         _messagesTypes[5648] = StorageObjectRemoveMessage;
         _messagesTypes[6035] = StorageObjectsRemoveMessage;
         _messagesTypes[5503] = SetUpdateMessage;
         _messagesTypes[3009] = InventoryWeightMessage;
         _messagesTypes[3010] = ObjectMovementMessage;
         _messagesTypes[3025] = ObjectAddedMessage;
         _messagesTypes[6033] = ObjectsAddedMessage;
         _messagesTypes[6030] = GoldAddedMessage;
         _messagesTypes[3004] = ObjectErrorMessage;
         _messagesTypes[3024] = ObjectDeletedMessage;
         _messagesTypes[6034] = ObjectsDeletedMessage;
         _messagesTypes[3023] = ObjectQuantityMessage;
         _messagesTypes[6206] = ObjectsQuantityMessage;
         _messagesTypes[3029] = ObjectModifiedMessage;
         _messagesTypes[6014] = ObjectJobAddedMessage;
         _messagesTypes[6519] = ObtainedItemMessage;
         _messagesTypes[6520] = ObtainedItemWithBonusMessage;
         _messagesTypes[6065] = LivingObjectMessageMessage;
         _messagesTypes[6526] = SymbioticObjectErrorMessage;
         _messagesTypes[6527] = SymbioticObjectAssociatedMessage;
         _messagesTypes[6529] = WrapperObjectErrorMessage;
         _messagesTypes[6523] = WrapperObjectAssociatedMessage;
         _messagesTypes[6458] = MimicryObjectPreviewMessage;
         _messagesTypes[6461] = MimicryObjectErrorMessage;
         _messagesTypes[6462] = MimicryObjectAssociatedMessage;
         _messagesTypes[6750] = PresetsMessage;
         _messagesTypes[6760] = ItemForPresetUpdateMessage;
         _messagesTypes[6763] = PresetSavedMessage;
         _messagesTypes[6762] = PresetSaveErrorMessage;
         _messagesTypes[6748] = PresetDeleteResultMessage;
         _messagesTypes[6747] = PresetUseResultMessage;
         _messagesTypes[6757] = PresetUseResultWithMissingIdsMessage;
         _messagesTypes[6834] = ExchangeMoneyMovementInformationMessage;
         _messagesTypes[6595] = ExchangeCraftCountModifiedMessage;
         _messagesTypes[5515] = ExchangeObjectMessage;
         _messagesTypes[5516] = ExchangeObjectAddedMessage;
         _messagesTypes[6535] = ExchangeObjectsAddedMessage;
         _messagesTypes[5517] = ExchangeObjectRemovedMessage;
         _messagesTypes[6532] = ExchangeObjectsRemovedMessage;
         _messagesTypes[5519] = ExchangeObjectModifiedMessage;
         _messagesTypes[6533] = ExchangeObjectsModifiedMessage;
         _messagesTypes[6009] = ExchangeObjectPutInBagMessage;
         _messagesTypes[6010] = ExchangeObjectRemovedFromBagMessage;
         _messagesTypes[6008] = ExchangeObjectModifiedInBagMessage;
         _messagesTypes[5521] = ExchangeKamaModifiedMessage;
         _messagesTypes[6670] = ExchangePodsModifiedMessage;
         _messagesTypes[6020] = ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
         _messagesTypes[5522] = ExchangeRequestedMessage;
         _messagesTypes[5523] = ExchangeRequestedTradeMessage;
         _messagesTypes[5512] = ExchangeStartedMessage;
         _messagesTypes[6129] = ExchangeStartedWithPodsMessage;
         _messagesTypes[6236] = ExchangeStartedWithStorageMessage;
         _messagesTypes[6272] = ExchangeBidHouseBuyResultMessage;
         _messagesTypes[5945] = ExchangeBidHouseItemAddOkMessage;
         _messagesTypes[5946] = ExchangeBidHouseItemRemoveOkMessage;
         _messagesTypes[5947] = ExchangeBidHouseGenericItemAddedMessage;
         _messagesTypes[5948] = ExchangeBidHouseGenericItemRemovedMessage;
         _messagesTypes[5949] = ExchangeBidHouseInListAddedMessage;
         _messagesTypes[6337] = ExchangeBidHouseInListUpdatedMessage;
         _messagesTypes[5950] = ExchangeBidHouseInListRemovedMessage;
         _messagesTypes[6612] = ExchangeBidHouseUnsoldItemsMessage;
         _messagesTypes[6613] = ExchangeOfflineSoldItemsMessage;
         _messagesTypes[5509] = ExchangeIsReadyMessage;
         _messagesTypes[6589] = ExchangeStoppedMessage;
         _messagesTypes[5513] = ExchangeErrorMessage;
         _messagesTypes[5628] = ExchangeLeaveMessage;
         _messagesTypes[6569] = DecraftResultMessage;
         _messagesTypes[6601] = RecycleResultMessage;
         _messagesTypes[5785] = ExchangeStartOkNpcTradeMessage;
         _messagesTypes[6567] = ExchangeStartOkRunesTradeMessage;
         _messagesTypes[6778] = ExchangeStartOkEvolutiveObjectRecycleTradeMessage;
         _messagesTypes[6779] = EvolutiveObjectRecycleResultMessage;
         _messagesTypes[6600] = ExchangeStartOkRecycleTradeMessage;
         _messagesTypes[5761] = ExchangeStartOkNpcShopMessage;
         _messagesTypes[5768] = ExchangeOkMultiCraftMessage;
         _messagesTypes[5790] = ExchangeCraftResultMessage;
         _messagesTypes[6000] = ExchangeCraftResultWithObjectIdMessage;
         _messagesTypes[5999] = ExchangeCraftResultWithObjectDescMessage;
         _messagesTypes[6188] = ExchangeCraftResultMagicWithObjectDescMessage;
         _messagesTypes[5794] = ExchangeCraftInformationObjectMessage;
         _messagesTypes[5767] = ExchangeStartOkHumanVendorMessage;
         _messagesTypes[5910] = ExchangeShopStockStartedMessage;
         _messagesTypes[5909] = ExchangeShopStockMovementUpdatedMessage;
         _messagesTypes[6038] = ExchangeShopStockMultiMovementUpdatedMessage;
         _messagesTypes[5907] = ExchangeShopStockMovementRemovedMessage;
         _messagesTypes[6037] = ExchangeShopStockMultiMovementRemovedMessage;
         _messagesTypes[5984] = ExchangeStartedMountStockMessage;
         _messagesTypes[6664] = ExchangeStartedTaxCollectorShopMessage;
         _messagesTypes[5905] = ExchangeStartedBidSellerMessage;
         _messagesTypes[5904] = ExchangeStartedBidBuyerMessage;
         _messagesTypes[5755] = ExchangeBidPriceMessage;
         _messagesTypes[6464] = ExchangeBidPriceForSellerMessage;
         _messagesTypes[5765] = ExchangeTypesExchangerDescriptionForUserMessage;
         _messagesTypes[5752] = ExchangeTypesItemsExchangerDescriptionForUserMessage;
         _messagesTypes[5793] = ExchangeWeightMessage;
         _messagesTypes[5762] = ExchangeGuildTaxCollectorGetMessage;
         _messagesTypes[5769] = ItemNoMoreAvailableMessage;
         _messagesTypes[5759] = ExchangeBuyOkMessage;
         _messagesTypes[5792] = ExchangeSellOkMessage;
         _messagesTypes[5787] = ExchangeReplyTaxVendorMessage;
         _messagesTypes[5786] = ExchangeWaitingResultMessage;
         _messagesTypes[5991] = ExchangeStartOkMountWithOutPaddockMessage;
         _messagesTypes[5979] = ExchangeStartOkMountMessage;
         _messagesTypes[5981] = ExchangeMountStableErrorMessage;
         _messagesTypes[6555] = ExchangeMountsStableAddMessage;
         _messagesTypes[6561] = ExchangeMountsPaddockAddMessage;
         _messagesTypes[6557] = ExchangeMountsStableBornAddMessage;
         _messagesTypes[6556] = ExchangeMountsStableRemoveMessage;
         _messagesTypes[6559] = ExchangeMountsPaddockRemoveMessage;
         _messagesTypes[6554] = ExchangeMountsTakenFromPaddockMessage;
         _messagesTypes[6055] = ExchangeMountFreeFromPaddockMessage;
         _messagesTypes[6056] = ExchangeMountSterilizeFromPaddockMessage;
         _messagesTypes[5802] = ExchangeBidSearchOkMessage;
         _messagesTypes[5810] = ExchangeItemAutoCraftStopedMessage;
         _messagesTypes[5813] = ExchangeStartOkCraftMessage;
         _messagesTypes[5941] = ExchangeStartOkCraftWithInformationMessage;
         _messagesTypes[5818] = ExchangeStartOkMulticraftCrafterMessage;
         _messagesTypes[5817] = ExchangeStartOkMulticraftCustomerMessage;
         _messagesTypes[6598] = ExchangeCrafterJobLevelupMessage;
         _messagesTypes[5819] = ExchangeStartOkJobIndexMessage;
         _messagesTypes[6578] = ExchangeCraftPaymentModifiedMessage;
         _messagesTypes[6753] = UpdateMountCharacteristicsMessage;
         _messagesTypes[6336] = ObjectAveragePricesErrorMessage;
         _messagesTypes[6335] = ObjectAveragePricesMessage;
         _messagesTypes[5739] = PurchasableDialogMessage;
         _messagesTypes[6315] = AccountHouseMessage;
         _messagesTypes[5734] = HousePropertiesMessage;
         _messagesTypes[5735] = HouseBuyResultMessage;
         _messagesTypes[6727] = HouseSellingUpdateMessage;
         _messagesTypes[6140] = HouseToSellListMessage;
         _messagesTypes[5701] = HouseGuildNoneMessage;
         _messagesTypes[5703] = HouseGuildRightsMessage;
         _messagesTypes[6516] = PaddockBuyResultMessage;
         _messagesTypes[5824] = PaddockPropertiesMessage;
         _messagesTypes[6018] = PaddockSellBuyDialogMessage;
         _messagesTypes[6026] = GameDataPlayFarmObjectAnimationMessage;
         _messagesTypes[6138] = PaddockToSellListMessage;
         _messagesTypes[6630] = RoomAvailableUpdateMessage;
         _messagesTypes[6620] = HavenBagPackListMessage;
         _messagesTypes[6632] = EditHavenBagStartMessage;
         _messagesTypes[6628] = EditHavenBagFinishedMessage;
         _messagesTypes[6644] = HavenBagDailyLoteryMessage;
         _messagesTypes[6634] = HavenBagFurnituresMessage;
         _messagesTypes[6622] = MapComplementaryInformationsDataInHavenBagMessage;
         _messagesTypes[6713] = HavenBagPermissionsUpdateMessage;
         _messagesTypes[6645] = InviteInHavenBagClosedMessage;
         _messagesTypes[6642] = InviteInHavenBagMessage;
         _messagesTypes[6643] = InviteInHavenBagOfferMessage;
         _messagesTypes[5977] = MountSterilizedMessage;
         _messagesTypes[6308] = MountReleasedMessage;
         _messagesTypes[5983] = MountRenamedMessage;
         _messagesTypes[5970] = MountXpRatioMessage;
         _messagesTypes[5973] = MountDataMessage;
         _messagesTypes[6172] = MountDataErrorMessage;
         _messagesTypes[5968] = MountSetMessage;
         _messagesTypes[5982] = MountUnSetMessage;
         _messagesTypes[5963] = MountEquipedErrorMessage;
         _messagesTypes[5967] = MountRidingMessage;
         _messagesTypes[5993] = GameDataPaddockObjectRemoveMessage;
         _messagesTypes[5990] = GameDataPaddockObjectAddMessage;
         _messagesTypes[5992] = GameDataPaddockObjectListAddMessage;
         _messagesTypes[5978] = MountEmoteIconUsedOkMessage;
         _messagesTypes[5740] = LockableShowCodeDialogMessage;
         _messagesTypes[5672] = LockableCodeResultMessage;
         _messagesTypes[5671] = LockableStateUpdateAbstractMessage;
         _messagesTypes[5668] = LockableStateUpdateHouseDoorMessage;
         _messagesTypes[5669] = LockableStateUpdateStorageMessage;
         _messagesTypes[5675] = DocumentReadingBeginMessage;
         _messagesTypes[6536] = ComicReadingBeginMessage;
         _messagesTypes[6367] = TitlesAndOrnamentsListMessage;
         _messagesTypes[6364] = TitleGainedMessage;
         _messagesTypes[6371] = TitleLostMessage;
         _messagesTypes[6368] = OrnamentGainedMessage;
         _messagesTypes[6770] = OrnamentLostMessage;
         _messagesTypes[6366] = TitleSelectedMessage;
         _messagesTypes[6373] = TitleSelectErrorMessage;
         _messagesTypes[6369] = OrnamentSelectedMessage;
         _messagesTypes[6370] = OrnamentSelectErrorMessage;
         _messagesTypes[5934] = ContactLookMessage;
         _messagesTypes[6045] = ContactLookErrorMessage;
         _messagesTypes[6688] = SocialNoticeMessage;
         _messagesTypes[6695] = BulletinMessage;
         _messagesTypes[6684] = SocialNoticeSetErrorMessage;
         _messagesTypes[6521] = AccessoryPreviewErrorMessage;
         _messagesTypes[6517] = AccessoryPreviewMessage;
         _messagesTypes[6275] = MailStatusMessage;
         _messagesTypes[6292] = NewMailMessage;
         _messagesTypes[6649] = HaapiApiKeyMessage;
         _messagesTypes[6704] = FinishMoveListMessage;
         _messagesTypes[6498] = TreasureHuntShowLegendaryUIMessage;
         _messagesTypes[6489] = TreasureHuntRequestAnswerMessage;
         _messagesTypes[6486] = TreasureHuntMessage;
         _messagesTypes[6483] = TreasureHuntFinishedMessage;
         _messagesTypes[6484] = TreasureHuntDigRequestAnswerMessage;
         _messagesTypes[6509] = TreasureHuntDigRequestAnswerFailedMessage;
         _messagesTypes[6507] = TreasureHuntFlagRequestAnswerMessage;
         _messagesTypes[6491] = TreasureHuntAvailableRetryCountUpdateMessage;
         _messagesTypes[6799] = BreachStateMessage;
         _messagesTypes[6811] = BreachCharactersMessage;
         _messagesTypes[6800] = BreachBonusMessage;
         _messagesTypes[6786] = BreachBudgetMessage;
         _messagesTypes[6798] = BreachSavedMessage;
         _messagesTypes[6812] = BreachBranchesMessage;
         _messagesTypes[6813] = BreachRewardsMessage;
         _messagesTypes[6797] = BreachRewardBoughtMessage;
         _messagesTypes[6788] = BreachSaveBoughtMessage;
         _messagesTypes[6805] = BreachInvitationOfferMessage;
         _messagesTypes[6792] = BreachInvitationResponseMessage;
         _messagesTypes[6790] = BreachInvitationCloseMessage;
         _messagesTypes[6789] = BreachKickResponseMessage;
         _messagesTypes[6836] = AnomalySubareaInformationResponseMessage;
         _messagesTypes[6767] = HaapiTokenMessage;
         _messagesTypes[6768] = HaapiAuthErrorMessage;
         _messagesTypes[6769] = HaapiSessionMessage;
         _unpackModes[5743] = UnpackMode.ASYNC;
      }
      
      public function MessageReceiver()
      {
         super();
      }
      
      public static function register() : void
      {
         StoreDataManager.getInstance().registerClass(new NetworkDataContainerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ProtocolRequired(),true,true);
         StoreDataManager.getInstance().registerClass(new LoginQueueStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QueueStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ConsoleMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ConsoleCommandsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HelloConnectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CredentialsAcknowledgementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NicknameRegistrationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountLinkRequiredMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NicknameRefusedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NicknameAcceptedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationSuccessWithLoginTokenMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationFailedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationFailedBannedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationFailedForBadVersionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServersListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SelectedServerDataMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SelectedServerDataExtendedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SelectedServerRefusedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceSearchErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceServerListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MigratedServerListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HelloGameMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AuthenticationTicketAcceptedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AuthenticationTicketRefusedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlreadyConnectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountLoggingKickedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ReloginTokenStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSettingsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstantsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerOptionalFeaturesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountCapabilitiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TrustStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountInformationsUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CheckFileRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RawDataMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StartupActionsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StartupActionAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StartupActionFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCanBeCreatedResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCreationResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterDeletionErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterNameSuggestionSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterNameSuggestionFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicCharactersListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharactersListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharactersListWithRemodelingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharactersListErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterSelectedSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterSelectedForceMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterSelectedErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PopupWarningMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicDateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicTimeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlmanachCalendarDateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicNoOperationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicAckMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SystemMessageDisplayMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TextInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OnConnectionEventMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SetCharacterRestrictionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerExperienceModificatorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCapabilitiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterLoadingCompleteMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextCreateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextCreateErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextDestroyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRemoveElementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRemoveMultipleElementsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRemoveElementWithEventMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRemoveMultipleElementsWithEventsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextMoveElementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextMoveMultipleElementsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRefreshEntityLookMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameMapNoMovementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameMapMovementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameCautiousMapMovementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameMapChangeOrientationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameMapChangeOrientationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameEntityDispositionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameEntitiesDispositionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameEntityDispositionErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRefreshMonsterBoostsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerStatusUpdateErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicWhoIsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicWhoIsNoMatchMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NumericWhoIsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicPongMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicLatencyStatsRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SequenceNumberRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CurrentServerStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CinematicMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new URLOpenMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DebugHighlightCellsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DebugClearHighlightCellsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DebugInClientMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ClientYouAreDrunkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DisplayNumericalValuePaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CurrentMapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CurrentMapInstanceMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportOnSameMapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapFightCountMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapRunningFightListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapRunningFightDetailsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapRunningFightDetailsExtendedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapObstacleUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataInHouseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsWithCoordsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapRewardRateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachEnterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachTeleportResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachExitResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsBreachMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachGameFightEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AnomalyStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsAnomalyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapFightStartPositionsUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayShowActorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayShowMultipleActorsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayShowActorWithEventMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterStatsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FighterStatsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterLevelUpMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterExperienceGainMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterLevelUpInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateLifePointsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LifePointsRegenBeginMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LifePointsRegenEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerLifeStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGameOverMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayFightRequestCanceledMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayAggressionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerFightFriendlyRequestedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerFightFriendlyAnsweredMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaRegistrationStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaFightPropositionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaFighterStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaUpdatePlayerInfosMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaSwitchToFightServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaSwitchToGameServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaInvitationCandidatesAnswer(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaLeagueRewardsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMonsterAngryAtPlayerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMonsterNotAngryAtPlayerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayShowChallengeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayRemoveChallengeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlaySpellAnimMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedActionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedObjectUseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedActionFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShowCellMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShowCellSpectatorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightStartingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightJoinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightSpectatorJoinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementPossiblePositionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsCancelledMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightOptionStateUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightUpdateTeamMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightRemoveTeamMemberMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightHumanReadyStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightStartMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightSpectateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightResumeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightResumeWithSlavesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightNewRoundMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnStartMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightNewWaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnStartPlayingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnResumeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPauseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SlaveSwitchContextMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SlaveNoLongerControledMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RefreshCharacterStatsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnReadyRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightSynchronizeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightShowFighterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightRefreshFighterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightShowFighterRandomStaticPoseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ArenaFighterLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SequenceStartMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SequenceEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractGameActionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionNoopMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractGameActionWithAckMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightNoSpellCastMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractGameActionFightTargetedAbilityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSpellCastMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightCloseCombatMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightInvisibleDetectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightPointsVariationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightTackledMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDeathMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightKillMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightVanishMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSpellCooldownVariationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSpellImmunityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightLifePointsGainMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightLifePointsLostMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightLifeAndShieldPointsLostMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDispellableEffectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightReflectSpellMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightReduceDamagesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightReflectDamagesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDodgePointLossMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSlideMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightTeleportOnSameMapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightExchangePositionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDispellMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDispellEffectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDispellSpellMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightModifyEffectsDurationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightTriggerEffectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightStealKamaMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightChangeLookMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightInvisibilityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSummonMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightMarkCellsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightUnmarkCellsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightTriggerGlyphTrapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightActivateGlyphTrapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightCarryCharacterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightThrowCharacterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDropCharacterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmoteListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmoteAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmoteRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmotePlayAbstractMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmotePlayMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmotePlayMassiveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmotePlayErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatSmileyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatCommunityChannelCommunityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LocalizedChatSmileyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MoodSmileyResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MoodSmileyUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatSmileyExtraPackListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatAbstractServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatAdminServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatServerWithObjectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatServerCopyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatServerCopyWithObjectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EnabledChannelsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChannelEnablingChangeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SpellListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LeaveDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PauseDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveUseErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveUsedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveUseEndedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveMapUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StatedMapUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElementUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StatedElementUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ZaapRespawnUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportDestinationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ZaapDestinationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportBuddiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportBuddiesRequestedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportToBuddyOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportToBuddyCloseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SpellVariantActivationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StatsUpgradeResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeTargetsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeInfoMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeTargetUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EntityInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EntitiesInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdolSelectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdolSelectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdolListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdolPartyRefreshMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdolPartyLostMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdolFightPreparationUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementDetailsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementDetailedListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementFinishedInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementRewardSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementRewardErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendGuildWarnOnAchievementCompleteStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonKeyRingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonKeyRingUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMapPlayersAgressableStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateSelfAgressableStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlignmentRankUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CompassResetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CompassUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CompassUpdatePartyMemberMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AtlasPointInformationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CompassUpdatePvpSeekMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractPartyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractPartyEventMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyModifiableStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationDungeonMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationDetailsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationDungeonDetailsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationCancelledForGuestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyCancelInvitationNotificationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyRefuseInvitationNotificationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyCannotJoinErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyJoinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyNewGuestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyNewMemberMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyUpdateLightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyEntityUpdateLightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberEjectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyLeaderUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyFollowStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyLocateMembersMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyKickedByMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyRestrictedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyDeletedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyLoyaltyStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractPartyMemberInFightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberInStandardFightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberInBreachFightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyNameUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyNameSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderAvailableDungeonsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderListenErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRoomContentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRoomContentUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRegisterSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRegisterErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ContactAddFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SpouseStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintancesListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SpouseInformationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendAddFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendDeleteResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendWarnOnConnectionStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new WarnOnPermaDeathStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendWarnOnLevelGainStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendStatusShareStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredAddFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredDeleteResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceCreationStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceModificationStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceCreationResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInvitedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInvitationStateRecruterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInvitationStateRecrutedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceJoinedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceGuildLeavingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceLeftMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceMembershipMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new KohUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AreaFightModificatorUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ClientUIOpenedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ClientUIOpenedByObjectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildCreationStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildModificationStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildCreationResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInvitedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInvitationStateRecruterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInvitationStateRecrutedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildJoinedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMemberOnlineStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformationsGeneralMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformationsMembersMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformationsMemberUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformationsPaddocksMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMemberLeavingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLeftMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMembershipMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLevelUpMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInfosUpgradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildHousesInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildHouseUpdateInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildHouseRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPaddockBoughtMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPaddockRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMemberWarnOnConnectionStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMotdMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMotdSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildBulletinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildBulletinSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFactsErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFactsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInAllianceFactsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFactsErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFactsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildVersatileInfoListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceVersatileInfoListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancePartialListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInsiderInfoMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceMotdMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceMotdSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceBulletinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceBulletinSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorMovementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractTaxCollectorListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TopTaxCollectorListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorStateUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorMovementAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorMovementRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorAttackedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorAttackedResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFightPlayersHelpersJoinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFightPlayersHelpersLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFightPlayersEnemiesListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFightPlayersEnemyRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorMovementsOfflineMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismSetSabotagedRefusedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismFightDefenderAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismFightDefenderLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismFightAttackerAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismFightAttackerRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismsListUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeFightJoinRefusedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismInfoCloseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismsInfoValidMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismFightAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismFightRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismInfoInValidMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismFightStateUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismSettingsErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareVersatileListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareSubscribedListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareWonListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareCreatedListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareInformationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareCanceledMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareWonMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareSubscribedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareCreatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareRewardsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareRewardWonMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DareRewardConsumeValidationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestValidatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestObjectiveValidatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestStepValidatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestStepStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestStepInfoMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FollowedQuestsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NotificationListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NotificationByServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SubscriptionLimitationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SubscriptionZoneMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuestLimitationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuestModeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapNpcsQuestStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NpcGenericActionFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PortalDialogCreationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NpcDialogCreationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NpcDialogQuestionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorDialogQuestionBasicMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorDialogQuestionExtendedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceTaxCollectorDialogQuestionExtendedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancePrismDialogQuestionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EntityTalkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobDescriptionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobLevelUpMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobExperienceMultiUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobExperienceUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobExperienceOtherPlayerUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobAllowMultiCraftRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobMultiCraftAvailableSkillsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectorySettingsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobBookSubscriptionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryEntryMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new KamasUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectGroundAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectGroundListAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectGroundRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectGroundRemovedMultipleMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InventoryContentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarContentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarAddErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarRemoveErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarSwapErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarRefreshMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarReplacedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageInventoryContentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageKamasUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageObjectUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageObjectsUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageObjectRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageObjectsRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SetUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InventoryWeightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectMovementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectsAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GoldAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectDeletedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectsDeletedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectQuantityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectsQuantityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectJobAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObtainedItemMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObtainedItemWithBonusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LivingObjectMessageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SymbioticObjectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SymbioticObjectAssociatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new WrapperObjectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new WrapperObjectAssociatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MimicryObjectPreviewMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MimicryObjectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MimicryObjectAssociatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ItemForPresetUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetSavedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetSaveErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetDeleteResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetUseResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetUseResultWithMissingIdsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMoneyMovementInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftCountModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectsAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectsRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectsModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectPutInBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectRemovedFromBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectModifiedInBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeKamaModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangePodsModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeRequestedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeRequestedTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedWithPodsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedWithStorageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseBuyResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseItemAddOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseItemRemoveOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseGenericItemAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseGenericItemRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseUnsoldItemsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeOfflineSoldItemsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeIsReadyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStoppedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DecraftResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RecycleResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkNpcTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkRunesTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkEvolutiveObjectRecycleTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EvolutiveObjectRecycleResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkRecycleTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkNpcShopMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeOkMultiCraftMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftResultWithObjectIdMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftResultWithObjectDescMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftResultMagicWithObjectDescMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftInformationObjectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkHumanVendorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeShopStockStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeShopStockMovementUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeShopStockMultiMovementUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeShopStockMovementRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeShopStockMultiMovementRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedMountStockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedTaxCollectorShopMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedBidSellerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedBidBuyerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidPriceMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidPriceForSellerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeTypesExchangerDescriptionForUserMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeTypesItemsExchangerDescriptionForUserMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeWeightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeGuildTaxCollectorGetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ItemNoMoreAvailableMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBuyOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeSellOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeReplyTaxVendorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeWaitingResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkMountWithOutPaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkMountMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountStableErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsStableAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsPaddockAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsStableBornAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsStableRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsPaddockRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsTakenFromPaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountFreeFromPaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountSterilizeFromPaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidSearchOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeItemAutoCraftStopedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkCraftMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkCraftWithInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkMulticraftCrafterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkMulticraftCustomerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCrafterJobLevelupMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkJobIndexMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftPaymentModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMountCharacteristicsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectAveragePricesErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectAveragePricesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PurchasableDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountHouseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HousePropertiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseBuyResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseSellingUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseToSellListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseGuildNoneMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseGuildRightsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockBuyResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockPropertiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockSellBuyDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameDataPlayFarmObjectAnimationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockToSellListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RoomAvailableUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HavenBagPackListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EditHavenBagStartMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EditHavenBagFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HavenBagDailyLoteryMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HavenBagFurnituresMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataInHavenBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HavenBagPermissionsUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InviteInHavenBagClosedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InviteInHavenBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InviteInHavenBagOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountSterilizedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountReleasedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountRenamedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountXpRatioMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountDataMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountDataErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountSetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountUnSetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountEquipedErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountRidingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectListAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountEmoteIconUsedOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableShowCodeDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableCodeResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableStateUpdateAbstractMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableStateUpdateHouseDoorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableStateUpdateStorageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DocumentReadingBeginMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ComicReadingBeginMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitlesAndOrnamentsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitleGainedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitleLostMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OrnamentGainedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OrnamentLostMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitleSelectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitleSelectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OrnamentSelectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OrnamentSelectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ContactLookMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ContactLookErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SocialNoticeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BulletinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SocialNoticeSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccessoryPreviewErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccessoryPreviewMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MailStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NewMailMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiApiKeyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FinishMoveListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntShowLegendaryUIMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntRequestAnswerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntDigRequestAnswerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntDigRequestAnswerFailedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntFlagRequestAnswerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntAvailableRetryCountUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachCharactersMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachBonusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachBudgetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachSavedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachBranchesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachRewardsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachRewardBoughtMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachSaveBoughtMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachInvitationOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachInvitationResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachInvitationCloseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachKickResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AnomalySubareaInformationResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiTokenMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiAuthErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiSessionMessage(),true,true);
      }
      
      public function parse(input:ICustomDataInput, messageId:uint, messageLength:uint) : INetworkMessage
      {
         var messageType:Class = _messagesTypes[messageId];
         if(!messageType)
         {
            _log.warn("Unknown packet received (ID " + messageId + ", length " + messageLength + ")");
            return null;
         }
         var message:INetworkMessage = new messageType();
         message.unpack(input,messageLength);
         message.unpacked = true;
         return message;
      }
      
      public function parseAsync(input:ICustomDataInput, messageId:uint, messageLength:uint, callback:Function) : INetworkMessage
      {
         var messageType:Class = _messagesTypes[messageId];
         if(!messageType)
         {
            _log.warn("Unknown packet received (ID " + messageId + ", length " + messageLength + ")");
            return null;
         }
         var message:INetworkMessage = new messageType();
         message.unpacked = false;
         callback(message,message.unpackAsync(input,messageLength));
         return message;
      }
      
      public function getUnpackMode(messageId:uint) : uint
      {
         return messageId in _unpackModes?uint(_unpackModes[messageId]):uint(UnpackMode.DEFAULT);
      }
   }
}
